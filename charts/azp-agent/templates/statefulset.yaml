{{ $fullname := (include "azp-agent.fullname" .) }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $fullname }}
  labels:
    {{- include "azp-agent.labels" . | nindent 4 }}
    component: agent
    {{- include "azp-agent.stringDict" .Values.labels | nindent 4 }}
  {{- if .Values.annotations }}
  annotations:
    {{- include "azp-agent.stringDict" .Values.annotations | nindent 4 }}
  {{- end }}
{{- $combinePVT := (and .Values.azp.persistence.enabled .Values.docker.persistence.enabled (eq .Values.azp.persistence.name .Values.docker.persistence.name)) }}
spec:
  podManagementPolicy: {{ .Values.podManagementPolicy }}
  replicas: {{ .Values.replicaCount }}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
  serviceName: {{ $fullname }}
  selector:
    matchLabels:
      {{- include "azp-agent.selector" . | nindent 6 }}
      component: agent
  template:
    metadata:
      labels:
        {{- include "azp-agent.labels" . | nindent 8 }}
        component: agent
        {{- include "azp-agent.stringDict" .Values.podLabels | nindent 8 }}
      {{- if .Values.podAnnotations }}
      annotations:
        {{- include "azp-agent.stringDict" .Values.podAnnotations | nindent 8 }}
      {{- end }}
    spec:
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- .Values.imagePullSecrets | toYaml | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "azp-agent.serviceAccountName" . }}
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.azp.image.repository }}:{{ .Values.azp.image.tag }}"
        imagePullPolicy: {{ .Values.azp.image.pullPolicy }}
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: AZP_WORK
          value: {{ .Values.azp.workspace | quote }}
        - name: AZP_URL
          value: {{ .Values.azp.url | required "The Azure Devops URL is required!" | quote }}
        - name: AZP_TOKEN_FILE
          value: /azp/.token
        - name: AZP_POOL
          value: {{ .Values.azp.pool | quote }}
        - name: AZP_AGENT_NAME
          value: {{ .Values.azp.agentName | quote }}
        - name: AGENT_TOOLSDIRECTORY
          value: {{ .Values.azp.hostedToolCache | quote }}
        {{- if .Values.docker.enabled }}
        - name: DOCKER_HOST
          value: {{ printf "tcp://localhost:%s" (.Values.docker.tls | ternary "2376" "2375") }}
          {{- if .Values.docker.tls }}
        - name: DOCKER_CERT_PATH
          value: /docker-certs
          {{- end }}
        - name: DOCKER_TLS_VERIFY
          value: {{ .Values.docker.tls | ternary "1" "" | quote }}
        {{- end }}
        - name: DEBIAN_FRONTEND
          value: 'noninteractive'
        {{- range .Values.azp.extraEnv }}
        - name: {{ .name | quote }}
          {{- if .secret }}
          valueFrom:
            secretKeyRef:
              name: {{ $fullname }}
              key: {{ .name | quote }}
          {{- else if .valueFrom }}
          valueFrom:
            {{ .valueFrom | toYaml | nindent 12 }}
          {{- else }}
          value: {{ .value | required (printf "A value is required for environment variable %s" .name) | quote }}
          {{- end }}
        {{- end }}
        {{- if .Values.azp.command }}
        command:
          {{ .Values.azp.command | toYaml | nindent 8 }}
        {{- else if .Values.azp.useStartupScript }}
        workingDir: /azp
        command:
        - '/azp/start.sh'
        {{- end }}
        {{- if .Values.azp.args }}
        args:
          {{ .Values.azp.args | toYaml | nindent 8 }}
        {{- end }}
        {{- with .Values.azp.resources }}
        resources:
          {{- . | toYaml | nindent 10 }}
        {{- end }}
        volumeMounts:
        - name: {{ .Values.azp.persistence.name | quote }}
          mountPath: {{ .Values.azp.workspace | quote }}
          {{- if or $combinePVT .Values.azp.persistence.toolCaches }}
          subPath: workspace
          {{- end }}
        {{- range .Values.azp.persistence.toolCaches }}
          {{- if . }}
        - name: {{ $.Values.azp.persistence.name | quote }}
          mountPath: "{{ $.Values.azp.hostedToolCache }}/{{ . }}"
          subPath: "hostedtoolcache/{{ . }}"
          {{- end }}
        {{- end }}  
        {{- if .Values.azp.useStartupScript }}
        - name: scripts
          mountPath: "/azp/start.sh"
          subPath: "start.sh"
          readOnly: true
        {{- end }}
        - name: token
          mountPath: "/azp/.token"
          {{- if and (not .Values.azp.existingSecret) (not .Values.azp.existingSecretKey) }}
          subPath: "azp-token"
          {{- else }}
          subPath: {{ .Values.azp.existingSecretKey | quote }}
          {{- end }}
          readOnly: true
        {{- if and .Values.docker.enabled .Values.docker.tls }}
        - name: docker-certs
          mountPath: /docker-certs
          subPath: client
          readOnly: true
        {{- end }}
        {{- if .Values.azp.extraVolumeMounts }}
          {{- .Values.azp.extraVolumeMounts | toYaml | nindent 8 }}
        {{- end }}
        {{- if .Values.azp.lifecycle }}
        lifecycle:
          {{- .Values.azp.lifecycle | toYaml | nindent 10 }}
        {{- end }}
        {{- if .Values.azp.securityContext }}
        securityContext:
          {{- .Values.azp.securityContext | toYaml | nindent 10 }}
        {{- end }}
      
      {{- if .Values.docker.enabled }}
      - name: docker-daemon
        image: "{{ .Values.docker.image.repository }}:{{ .Values.docker.image.tag }}"
        imagePullPolicy: {{ .Values.docker.image.pullPolicy }}
        ports:
        - name: docker-daemon
          containerPort: {{ .Values.docker.tls | ternary 2376 2375 }}
        env:
        - name: DOCKER_TLS_CERTDIR
          value: {{ .Values.docker.tls | ternary "/docker-certs" "" | quote }}
        {{- range .Values.docker.extraEnv }}
        - name: {{ .name | quote }}
          {{- if .secret }}
          valueFrom:
            secretKeyRef:
              name: {{ $fullname }}
              key: {{ .name | quote }}
          {{- else if .valueFrom }}
          valueFrom:
            {{ .valueFrom | toYaml | nindent 12 }}
          {{- else }}
          value: {{ .value | required (printf "A value is required for environment variable %s" .name) | quote }}
          {{- end }}
        {{- end }}
        {{- if .Values.docker.command }}
        command:
          {{ .Values.docker.command | toYaml | nindent 8 }}
        {{- end }}
        {{- if .Values.docker.args }}
        args:
          {{ .Values.docker.args | toYaml | nindent 8 }}
        {{- end }}
        {{- if .Values.docker.securityContext }}
        securityContext:
          {{- .Values.docker.securityContext | toYaml | nindent 10 }}
        {{- end }}
        {{- with .Values.docker.resources }}
        resources:
          {{- . | toYaml | nindent 10 }}
        {{- end }}
        volumeMounts:
        - name: {{ .Values.docker.persistence.name | quote }}
          mountPath: "/var/lib/docker"
          {{- if $combinePVT }}
          subPath: 'docker'
          {{- end }}
        {{- if .Values.docker.tls }}
        - name: docker-certs
          mountPath: /docker-certs
        {{- end }}
        {{- if .Values.docker.extraVolumeMounts }}
          {{- .Values.docker.extraVolumeMounts | toYaml | nindent 8 }}
        {{- end }}
        {{- if .Values.docker.liveness.enabled }}
        livenessProbe:
          tcpSocket:
            port: docker-daemon
          failureThreshold: {{ .Values.docker.liveness.failureThreshold }}
          initialDelaySeconds: {{ .Values.docker.liveness.initialDelaySeconds }}
          periodSeconds: {{ .Values.docker.liveness.periodSeconds }}
          successThreshold: {{ .Values.docker.liveness.successThreshold }}
          timeoutSeconds: {{ .Values.docker.liveness.timeoutSeconds }}
        {{- end }}
        {{- $dockerClean := (and .Values.docker.persistence.enabled .Values.docker.clean) }}
        {{- if or .Values.docker.lifecycle $dockerClean }}
        lifecycle:
          {{- if .Values.docker.lifecycle.postStart }}
          postStart:
            {{- .Values.docker.lifecycle.postStart | toYaml | nindent 12 }}
          {{- end }}
          {{- if $dockerClean }}
          preStop:
            {{- if .Values.docker.lifecycle.preStop }}
              {{ range $key, $value := .Values.docker.lifecycle.preStop }}
                {{- if eq $key "exec" }}{{ fail "Cannot define a preStop command if docker.clean is true!" }}{{- else }}
            {{ $key }}:
              {{- $value | toYaml | nindent 14 }}
                {{- end }}
              {{- end }}
            {{- end }}
            exec:
              command:
              - sh
              - -c
              - "docker system prune -f"
          {{- else if .Values.docker.lifecycle.preStop }}
          preStop:
            {{- .Values.docker.lifecycle.preStop | toYaml | nindent 12 }}
          {{- end }}
        {{- end }}
      {{- end }}
      
      {{- if .Values.sidecars }}
        {{- .Values.sidecars | toYaml | nindent 6 }}
      {{- end }}
      
      volumes:
      {{- if not .Values.azp.persistence.enabled }}
      - name: {{ .Values.azp.persistence.name | quote }}
        emptyDir: {}
      {{- end }}
      {{- if and .Values.docker.enabled (not .Values.docker.persistence.enabled) (ne .Values.azp.persistence.name .Values.docker.persistence.name) }}
      - name: {{ .Values.docker.persistence.name | quote }}
        emptyDir: {}
      {{- end }}
      {{- if .Values.azp.useStartupScript }}
      - name: scripts
        configMap:
          name: {{ $fullname }}
          defaultMode: 0554
      {{- end }}
      - name: token
        secret:
          {{- if and (not .Values.azp.existingSecret) (not .Values.azp.existingSecretKey) }}
          secretName: {{ $fullname }}
          items:
          - key: azp-token
            path: azp-token
          {{- else }}
          secretName: {{ .Values.azp.existingSecret | quote }}
          items:
          - key: {{ .Values.azp.existingSecretKey | quote }}
            path: {{ .Values.azp.existingSecretKey | quote }}
          {{- end }}
      {{- if and .Values.docker.enabled .Values.docker.tls }}
      - name: docker-certs
        emptyDir: {}
      {{- end }}
      {{- if .Values.extraVolumes }}
        {{- .Values.extraVolumes | toYaml | nindent 6 }}
      {{- end }}
      
      {{- if .Values.initContainers }}
      initContainers:
        {{- .Values.initContainers | toYaml | nindent 8 }}
      {{- end }}
      
      {{- if .Values.activeDeadlineSeconds }}
      activeDeadlineSeconds: {{ .Values.activeDeadlineSeconds }}
      {{- end }}
      {{- if .Values.dnsPolicy }}
      dnsPolicy: {{ .Values.dnsPolicy }}
      {{- end }}
      {{ if .Values.dnsConfig }}
      dnsConfig:
        {{- .Values.dnsConfig | toYaml | nindent 8 }}
      {{- end }}
      restartPolicy: {{ .Values.restartPolicy }}
      {{- if .Values.nodeSelector }}
      nodeSelector:
        {{- .Values.nodeSelector | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity:
        {{- .Values.affinity | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
        {{- .Values.tolerations | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.securityContext }}
      securityContext:
        {{- .Values.securityContext | toYaml | nindent 8 }}
      {{- end }}
      hostNetwork: {{ .Values.hostNetwork }}
      {{- if .Values.priority }}
      priority: {{ .Value.priority }}
      {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Value.priorityClassName | quote }}
      {{- end }}
      {{- if .Values.priority }}
      priority: {{ .Values.priority }}
      {{- end }}
      {{- if .Values.runtimeClassName }}
      runtimeClassName: {{ .Value.runtimeClassName | quote }}
      {{- end }}
      {{- if .Values.schedulerName }}
      schedulerName: {{ .Value.schedulerName | quote }}
      {{- end }}
  
  volumeClaimTemplates:
  {{- if .Values.azp.persistence.enabled }}
    {{- include "azp-agent.volumeClaimTemplate" (dict "root" . "data" .Values.azp.persistence) | nindent 2 }}
  {{- end }}
  {{- if and (not $combinePVT) .Values.docker.enabled .Values.docker.persistence.enabled }}
    {{- include "azp-agent.volumeClaimTemplate" (dict "root" . "data" .Values.docker.persistence) | nindent 2 }}
  {{- end }}
  {{- if .Values.extraVolumeClaimTemplates }}
    {{- .Values.extraVolumeClaimTemplates | toYaml | nindent 2 }}
  {{- end }}

{{- define "azp-agent.volumeClaimTemplate" -}}
- metadata:
    name: {{ .data.name | quote }}
    labels:
      {{- include "azp-agent.selector" .root | nindent 6 }}
      {{- include "azp-agent.stringDict" .data.labels | nindent 6 }}
    {{- if .data.annotations }}
    annotations:
      {{- include "azp-agent.stringDict" .data.annotations | nindent 6 }}
    {{- end }}
  spec:
    accessModes:
      {{- .data.accessModes | toYaml | nindent 4 }}
    {{- if .data.selector }}
    selector:
      {{- .data.selector | toYaml | nindent 6 }}
    {{- end }}
    resources:
      requests:
        storage: {{ .data.storage }}
      {{- if .data.storageLimit }}
      limits:
        storage: {{ .data.storageLimit }}
      {{- end }}
    storageClassName: {{ .data.storageClassName | quote }}
{{- end -}}
